name: build and release

on:
  push:
    tags:
     - 'v*'

jobs:
  build-apk:
    runs-on: ubuntu-latest
    outputs:
      signedReleaseFileDir: ${{ steps.split-path.outputs.signedReleaseFileDir }}
      signedReleaseFileName: ${{ steps.split-path.outputs.signedReleaseFileName }}
      signedReleaseFile: ${{ steps.sign-apk.outputs.signedReleaseFile }}
      releaseVersion: ${{ steps.get-version.outputs.version }}

    steps:
    - name: Get the version
      id: get-version
      run: echo ::set-output name=version::$(echo $GITHUB_REF | cut -d / -f 3)
          
    - uses: actions/checkout@v2
      
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    
    - name: Decode google-services.json
      env:
        FIREBASE_CONFIG: ${{ secrets.FIREBASE_CONFIG }}
      run: echo $FIREBASE_CONFIG > app/google-services.json
    
    - name: Build with Gradle
      run: ./gradlew assembleAdfreeRelease --stacktrace

    - name: Sign Adfree APK
      id: sign-apk
      uses: r0adkll/sign-android-release@v1
      with:
        releaseDirectory: app/build/outputs/apk/adfree/release
        signingKeyBase64: ${{ secrets.DEPLOY_SIGN_KEY_JKS_BASE64 }}
        alias: ${{ secrets.DEPLOY_SIGN_KEY_ALIAS }}
        keyStorePassword: ${{ secrets.DEPLOY_SIGN_KEY_JKS_PASSWORD }}
        keyPassword: ${{ secrets.DEPLOY_SIGN_KEY_PASSWORD }}
        
    - name: Split path
      id: split-path
      run: |
        echo ::set-output name=signedReleaseFileDir::$(dirname ${{ steps.sign-apk.outputs.signedReleaseFile }})
        echo ::set-output name=signedReleaseFileName::$(basename ${{ steps.sign-apk.outputs.signedReleaseFile }})
  
    - name: Save artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ steps.split-path.outputs.signedReleaseFileName }}
        path: ${{ steps.split-path.outputs.signedReleaseFileDir }}
        
  build-aab:
    runs-on: ubuntu-latest
    outputs:
      signedReleaseFileDir: ${{ steps.split-path.outputs.signedReleaseFileDir }}
      signedReleaseFileName: ${{ steps.split-path.outputs.signedReleaseFileName }}
      signedReleaseFile: ${{ steps.sign-apk.outputs.signedReleaseFile }}
      releaseVersion: ${{ steps.get-version.outputs.version }}

    steps:
    - name: Get the version
      id: get-version
      run: echo ::set-output name=version::$(echo $GITHUB_REF | cut -d / -f 3)
          
    - uses: actions/checkout@v2
      
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    
    - name: Decode google-services.json
      env:
        FIREBASE_CONFIG: ${{ secrets.FIREBASE_CONFIG }}
      run: echo $FIREBASE_CONFIG > app/google-services.json
    
    - name: Build with Gradle
      run: ./gradlew bundleAdfreeRelease --stacktrace

    - name: Sign Adfree AAB
      id: sign-apk
      uses: r0adkll/sign-android-release@v1
      with:
        releaseDirectory: app/build/outputs/bundle/adfreeRelease
        signingKeyBase64: ${{ secrets.DEPLOY_SIGN_KEY_JKS_BASE64 }}
        alias: ${{ secrets.DEPLOY_SIGN_KEY_ALIAS }}
        keyStorePassword: ${{ secrets.DEPLOY_SIGN_KEY_JKS_PASSWORD }}
        keyPassword: ${{ secrets.DEPLOY_SIGN_KEY_PASSWORD }}
        
    - name: Split path
      id: split-path
      run: |
        echo ::set-output name=signedReleaseFileDir::$(dirname ${{ steps.sign-apk.outputs.signedReleaseFile }})
        echo ::set-output name=signedReleaseFileName::$(basename ${{ steps.sign-apk.outputs.signedReleaseFile }})
  
    - name: Save artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ steps.split-path.outputs.signedReleaseFileName }}
        path: ${{ steps.split-path.outputs.signedReleaseFileDir }}
    
        
  gh-release:
    runs-on: ubuntu-latest
    needs: build-apk
    steps:
    - name: Get artifact
      uses: actions/download-artifact@v2
      with:
        name: ${{ needs.build-apk.outputs.signedReleaseFileName }}
        path: ${{ needs.build-apk.outputs.signedReleaseFileDir }}
    - name: Create Release on GitHub
      id: create-release
      uses: actions/create-release@v1.1.3
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Auto-Release of Adfree APK ${{ github.GITHUB_REF }} 
        body: Autogenerated and signed APK file for the adfree build variant.
        draft: false
        prerelease: false
        
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ${{ needs.build-apk.outputs.signedReleaseFile }}
        asset_name: FakeStandby_${{ needs.build-apk.outputs.releaseVersion }}_adfree_release.apk
        asset_content_type: application/vnd.android.package-archive
        
  play-store-release:
    runs-on: ubuntu-latest
    needs: build-aab
    steps:
    - uses: actions/checkout@v2

    - uses: actions/setup-node@v3
      with:
        node-version: 16
    - run: npm install
    
    - name: Create whats-new files
      id: whats-new
      run: cd ci && node generate_whatsnew_files.js
    
    - name: Get artifact
      uses: actions/download-artifact@v2
      with:
        name: ${{ needs.build-aab.outputs.signedReleaseFileName }}
        path: ${{ needs.build-aab.outputs.signedReleaseFileDir }}
      
    - name: Create draft release on Google Play
      uses: r0adkll/upload-google-play@v1
      with:
        serviceAccountJsonPlainText: ${{ secrets.GOOGLE_CLOUD_SERVICE_ACCOUNT_PLAY_STORE_JSON }}
        packageName: android.jonas.fakestandby
        releaseFiles: ${{ needs.build-aab.outputs.signedReleaseFile }}
        releaseName: ${{ needs.build-aab.outputs.releaseVersion }}
        track: production
        status: draft
        whatsNewDirectory: whatsnew/
        # mappingFile: app/build/outputs/mapping/adfreeRelease/mapping.txt
